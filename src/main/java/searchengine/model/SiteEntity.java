package searchengine.model;

import com.vladmihalcea.hibernate.type.basic.PostgreSQLEnumType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;
import org.hibernate.annotations.Type;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Set;

@Entity
@Getter
@Setter
@ApiModel(description = "entity representing a website")
@Table(name = "sites")
public class SiteEntity implements Serializable {

    @Id
    @ApiModelProperty("id generated by db automatically")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @ApiModelProperty("indexing status")
    @Enumerated(EnumType.STRING)
    @Type(PostgreSQLEnumType.class)
    @Column(name = "status", columnDefinition = "status_type", nullable = false)
    private StatusType status;

    @Column(name = "status_time", nullable = false)
    @ApiModelProperty("time when status was changed")
    private LocalDateTime statusTime;

    @Column(name = "last_error", columnDefinition = "TEXT")
    @ApiModelProperty("description of last error")
    private String lastError;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("URL of website")
    private String url;

    @Column(columnDefinition = "VARCHAR(255) NOT NULL")
    @ApiModelProperty("name of website")
    private String name;

    //    @OneToMany(mappedBy = "site", cascade = CascadeType.REMOVE)
//    @LazyCollection(LazyCollectionOption.EXTRA)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, orphanRemoval = true, mappedBy = "site")
    private Set<PageEntity> pageEntities;

    //    @OneToMany(mappedBy = "site", cascade = CascadeType.REMOVE)
//    @LazyCollection(LazyCollectionOption.EXTRA)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, orphanRemoval = true, mappedBy = "site")
    private Set<LemmaEntity> lemmaEntities;
}
