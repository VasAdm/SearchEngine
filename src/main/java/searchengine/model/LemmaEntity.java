package searchengine.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

@Entity
@Getter
@Setter
@ApiModel(description = "entity representing lemmas")
@Table(name = "lemmas", indexes = {@Index(name = "lemmas_site_id_lemma_index", columnList = "site_id, lemma"),
        @Index(name = "lemmas_site_id_index", columnList = "site_id")})
public class LemmaEntity implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    @Column(name = "id", nullable = false)
    private int id;

    @ManyToOne
    @JoinColumn(name = "site_id", referencedColumnName = "id", nullable = false)
    @JsonIgnore
    private SiteEntity site;

    @Column(columnDefinition = "VARCHAR(255)", nullable = false)
    @ApiModelProperty("normal form of a word")
    private String lemma;

    @Column(columnDefinition = "INT", nullable = false)
    @ApiModelProperty("the number of pages where the word occurs at least once")
    private int frequency;

    @OneToMany(mappedBy = "lemma", cascade = CascadeType.ALL)
//    @LazyCollection(LazyCollectionOption.EXTRA)
    private List<IndexEntity> indexEntities;

    public LemmaEntity(SiteEntity site, String lemma, int frequency) {
        this.site = site;
        this.lemma = lemma;
        this.frequency = frequency;
    }

    public LemmaEntity() {
        this(null, null, 0);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        LemmaEntity that = (LemmaEntity) o;

        if (id != that.id) return false;
        if (site.getId() != that.site.getId()) return false;
        if (frequency != that.frequency) return false;
        return Objects.equals(lemma, that.lemma);
    }

    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + site.getId();
        result = 31 * result + (lemma != null ? lemma.hashCode() : 0);
        result = 31 * result + frequency;
        return result;
    }
}
