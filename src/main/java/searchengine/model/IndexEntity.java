package searchengine.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.io.Serializable;


@Entity
@Getter
@Setter
@ApiModel(description = "entity representing search indexes")
@Table(name = "Indexes", indexes = {
        @Index(name = "indexes_page_id_index", columnList = "page_id"),
        @Index(name = "indexes_lemma_id_index", columnList = "lemma_id")})
public class IndexEntity implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty("id generated by db automatically")
    @Column(name = "id", nullable = false)
    private int id;

    @Column(columnDefinition = "FLOAT", nullable = false)
    @ApiModelProperty("rank of lemma")
    private float rank;

    @ManyToOne
    @JoinColumn(name = "page_id", referencedColumnName = "id", nullable = false)
    @JsonIgnore
    private PageEntity page;

    @ManyToOne
    @JoinColumn(name = "lemma_id", referencedColumnName = "id", nullable = false)
    @JsonIgnore
    private LemmaEntity lemma;

    public IndexEntity(float rank, PageEntity page, LemmaEntity lemma) {
        this.rank = rank;
        this.page = page;
        this.lemma = lemma;
    }

    public IndexEntity() {
        this(0f, null, null);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        IndexEntity that = (IndexEntity) o;

        if (id != that.id) return false;
        if (page.getId() != that.page.getId()) return false;
        if (lemma.getId() != that.lemma.getId()) return false;
        return Double.compare(rank, that.rank) == 0;
    }

    @Override
    public int hashCode() {
        int result;
        long temp;
        result = id;
        result = 31 * result + page.getId();
        result = 31 * result + lemma.getId();
        temp = Double.doubleToLongBits(rank);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }
}
